#!/usr/bin/env python

import sys
import os
import hashlib
from optparse import OptionParser
from swift.common.utils import parse_options
from swift.common import utils
from swift.common.client import get_auth, Connection, ClientException
from paste.deploy import appconfig
from swift_ring_sync.internal_proxy import InternalProxy

def put_rings(preauth_url, identity, password, container, ring_name, ring_file):
    with open(ring_file) as f:
        md5sum = hashlib.md5(f.read()).hexdigest()

    storage_url, auth_token =  get_auth(preauth_url, identity, password)
    create_connection = lambda: Connection(preauth_url, identity, password, preauthurl=storage_url, preauthtoken=auth_token)
    conn = create_connection()
    try:
        conn.head_container(container)
    except ClientException:
        print '%s: No such container, making...' % container
        conn.put_container(container)

    headers, obj_list = conn.get_container(container, prefix=ring_name)
    if obj_list:
        for obj in obj_list:
            if obj['name'] == ring_name:
                if obj['hash'] == md5sum:
                    return False, '%s: no need to update.' % ring_name
                else:
                    break
    with open(ring_file) as f:
        etag = conn.put_object(container, ring_name, f)
    if etag == md5sum:
        return True, '%s: update successfully.' % ring_name
    else:
        return False, '%s: fail to upload.' % ring_name

def put_rings_with_noauth(internal_proxy, account_id, container, ring_name, ring_file):
    with open(ring_file) as f:
        md5sum = hashlib.md5(f.read()).hexdigest()
    obj_list = internal_proxy.get_container_list(account_id, container, prefix=ring_name)
    if obj_list:
        for obj in obj_list:
            if obj['name'] == ring_name:
                if obj['hash'] == md5sum:
                    return False, '%s: no need to update.' % ring_name
                else:
                    break
    with open(ring_file) as f:
        resp = internal_proxy.upload_file(f, account_id, container, ring_name, compress=False, etag=md5sum)
    if resp:
        return True, '%s: update successfully.' % ring_name
    else:
        return False, '%s: fail to upload.' % ring_name


if __name__ == '__main__':
    parser = OptionParser("Usage: %prog CONFIG_FILE")
    conf_file, options = parse_options(parser=parser)
    ring_uploader_conf = utils.readconf(conf_file, 'ring-uploader')
    
    container = ring_uploader_conf.get('container_name', 'rings')
    ring_dir = ring_uploader_conf.get('ring_dir', '/etc/swift')
    preauth_url = ring_uploader_conf.get('auth_url', '')
    identity = ring_uploader_conf.get('identity', '')
    password = ring_uploader_conf.get('password', '')
    account_id = ring_uploader_conf.get('account_id', '')

    internal_proxy = None
    try:
        int_proxy_conf = appconfig('config:%s' % conf_file, name='proxy-server')
    except(LookupError):
        pass
    else:
        internal_proxy = InternalProxy(int_proxy_conf)

    rings = ['account.ring.gz', 'container.ring.gz', 'object.ring.gz']
    
    for ring in rings:
        ring_file = os.path.join(ring_dir, ring)
        if os.access(ring_file, os.F_OK):
            if internal_proxy and account_id:
                result, mesg = put_rings_with_noauth(internal_proxy, account_id, container, ring, ring_file)
            elif preauth_url and identity and password:
                result, mesg = put_rings(preauth_url, identity, password, container, ring, ring_file)
            else:
                print "No authentication informations, or it doesn't work on an swift server."
                break
            print mesg
        else:
            print '%s: No such file.' % ring_file
    sys.exit(0)
